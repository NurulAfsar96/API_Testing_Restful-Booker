{
	"info": {
		"_postman_id": "fe97d543-bd0e-418f-98c4-82c9442717f7",
		"name": "PracticeProject",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24573841"
	},
	"item": [
		{
			"name": "CreateToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var tokenValue = pm.response.json()\r",
							"pm.environment.set(\"Token\", tokenValue.token)\r",
							"\r",
							"pm.test(\"Token Validation\", function()\r",
							"{\r",
							"    pm.expect(tokenValue.token).to.eql(pm.environment.get(\"Token\"))\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/auth",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingIDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/booking",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingInfoFromID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/booking/1",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateNewBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"BookingID\", jsonData.bookingid)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Nurul\",\r\n    \"lastname\" : \"Afsar\",\r\n    \"totalprice\" : 1680,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2023-01-07\",\r\n        \"checkout\" : \"2019-01-12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateRandomlyNewBooking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//----------- Generate Random First Name --------------------\r",
							"var FirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(FirstName)\r",
							"pm.environment.set(\"FirstName\", FirstName)\r",
							"\r",
							"//----------- Generate Random Last Name ---------------------\r",
							"var LastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(LastName)\r",
							"pm.environment.set(\"LastName\", LastName)\r",
							"\r",
							"//----------- Generate Random Price -------------------------\r",
							"var price = Math.floor(10000 + Math.random() * 9000);\r",
							"console.log(price);\r",
							"pm.environment.set(\"TotalPrice\",price)\r",
							"\r",
							"//----------- Generate Random Paid Status -------------------\r",
							"var PaidStatus = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(PaidStatus)\r",
							"pm.environment.set(\"DepositPaid\", PaidStatus)\r",
							"\r",
							"//----------- Generate Random CheckIN -------------------\r",
							"\r",
							"const moment1 = require('moment')\r",
							"const today1 = moment1()\r",
							"\r",
							"var checkin = today1.format(\"YYYY-MM-DD\")\r",
							"pm.environment.set(\"CheckIn\", checkin)\r",
							"console.log(checkin)\r",
							"\r",
							"\r",
							"//----------- Generate Random CheckOUT -------------------\r",
							"const moment2 = require('moment')\r",
							"const today2 = moment2()\r",
							"const randomnumber =Math.floor(Math.random() * 100)\r",
							"var checkout = today2.add(randomnumber,'day').format(\"YYYY-MM-DD\")\r",
							"pm.environment.set(\"CheckOut\", checkout)\r",
							"console.log(checkout)\r",
							"\r",
							"//----------- Generate Array for Additional Need -------------------\r",
							"\r",
							"const additionalneeds = [\"Breakfast\",\"Lunch\",\"Snacks\",\"Dinner\"];\r",
							"const random = Math.floor(Math.random() * additionalneeds.length);\r",
							"var needs = additionalneeds[random]\r",
							"console.log(needs);\r",
							"//console.log(random,needs);\r",
							"\r",
							"pm.environment.set(\"AdditionalNeeds\", needs)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json()\r",
							"pm.environment.set(\"BookingID\", response.bookingid)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" :\"{{FirstName}}\",\r\n    \"lastname\" :\"{{LastName}}\",\r\n    \"totalprice\" :\"{{TotalPrice}}\",\r\n    \"depositpaid\" :\"{{DepositPaid}}\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{CheckIn}}\",\r\n        \"checkout\" : \"{{CheckOut}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{AdditionalNeeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetNewBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"console.log(code)\r",
							"\r",
							"switch(code){\r",
							"    case 200:\r",
							"    var response = pm.response.json()\r",
							"pm.test(\"Verify First Name\", function()\r",
							"{\r",
							"    pm.expect(response.firstname).to.eql(pm.environment.get(\"FirstName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Verify Last Name\", function()\r",
							"{\r",
							"    pm.expect(response.lastname).to.eql(pm.environment.get(\"LastName\"))\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Verify Total Price\", function()\r",
							"{\r",
							"    pm.expect(response.totalprice).to.eql(pm.environment.get(\"TotalPrice\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Checking Deposit Status\", function()\r",
							"{\r",
							"    pm.expect(response.depositpaid).to.eql(true)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify CheckIn date\", function()\r",
							"{\r",
							"    pm.expect(response.bookingdates.checkin).to.eql(pm.environment.get(\"CheckIn\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Verify CheckOut date\", function()\r",
							"{\r",
							"    pm.expect(response.bookingdates.checkout).to.eql(pm.environment.get(\"CheckOut\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Verify Additional Needs\", function()\r",
							"{\r",
							"    pm.expect(response.additionalneeds).to.eql(pm.environment.get(\"AdditionalNeeds\"))\r",
							"})\r",
							"break;\r",
							"\r",
							"case 400:\r",
							"pm.test(\"400, Bad Request\")\r",
							"break;\r",
							"case 403:\r",
							"pm.test(\"403, Forbidden\")\r",
							"break;\r",
							"case 404:\r",
							"pm.test(\"404, Not Found\")\r",
							"break;\r",
							"case 408:\r",
							"pm.test(\"408, Request Timeout\")\r",
							"break;\r",
							"case 500:\r",
							"pm.test(\"500, Internal Server Error\")\r",
							"break;\r",
							"case 502:\r",
							"pm.test(\"502, Bad Gateway\")\r",
							"break;\r",
							"}\r",
							"//------------ Test Response Time -----------------------\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"/*-------------- Test Request code ------------\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
							"}); */\r",
							"/*---------------- Matching Body String\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Maximus\");\r",
							"}); */\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/booking/{{BookingID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json()\r",
							"pm.environment.set(\"FirstName\", response.firstname)\r",
							"pm.environment.set(\"LastName\", response.lastname)\r",
							"pm.environment.set(\"TotalPrice\", response.totalprice)\r",
							"pm.environment.set(\"DepositPaid\", response.depositpaid)\r",
							"pm.environment.set(\"CheckIn\", response.bookingdates.checkin)\r",
							"pm.environment.set(\"CheckOut\", response.bookingdates.checkout)\r",
							"pm.environment.set(\"AdditionalNeeds\", response.additionalneeds)\r",
							"\r",
							"var code =pm.response.code\r",
							"\r",
							"if(code==200)\r",
							"{pm.test(\"Succesfully Updated\")}\r",
							"\r",
							"else{\r",
							"    pm.test(\"Failed to Update\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Nurul\",\r\n    \"lastname\": \"Afsar\",\r\n    \"totalprice\": 99761,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-08-15\",\r\n        \"checkout\": \"2024-09-05\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking/{{BookingID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"console.log(code)\r",
							"\r",
							"switch(code){\r",
							"    case 200:\r",
							"    var response = pm.response.json()\r",
							"pm.test(\"Verify First Name\", function()\r",
							"{\r",
							"    pm.expect(response.firstname).to.eql(pm.environment.get(\"FirstName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Verify Last Name\", function()\r",
							"{\r",
							"    pm.expect(response.lastname).to.eql(pm.environment.get(\"LastName\"))\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Verify Total Price\", function()\r",
							"{\r",
							"    pm.expect(response.totalprice).to.eql(pm.environment.get(\"TotalPrice\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Checking Deposit Status\", function()\r",
							"{\r",
							"    pm.expect(response.depositpaid).to.eql(true)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify CheckIn date\", function()\r",
							"{\r",
							"    pm.expect(response.bookingdates.checkin).to.eql(pm.environment.get(\"CheckIn\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Verify CheckOut date\", function()\r",
							"{\r",
							"    pm.expect(response.bookingdates.checkout).to.eql(pm.environment.get(\"CheckOut\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Verify Additional Needs\", function()\r",
							"{\r",
							"    pm.expect(response.additionalneeds).to.eql(pm.environment.get(\"AdditonalNeeds\"))\r",
							"})\r",
							"break;\r",
							"\r",
							"case 400:\r",
							"pm.test(\"400, Bad Request\")\r",
							"break;\r",
							"case 403:\r",
							"pm.test(\"403, Forbidden\")\r",
							"break;\r",
							"case 404:\r",
							"pm.test(\"404, Not Found\")\r",
							"break;\r",
							"case 408:\r",
							"pm.test(\"408, Request Timeout\")\r",
							"break;\r",
							"case 500:\r",
							"pm.test(\"500, Internal Server Error\")\r",
							"break;\r",
							"case 502:\r",
							"pm.test(\"502, Bad Gateway\")\r",
							"break;\r",
							"}\r",
							"//------------ Test Response Time -----------------------\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"/*-------------- Test Request code ------------\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
							"}); */\r",
							"/*---------------- Matching Body String\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Maximus\");\r",
							"}); */\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/booking/{{BookingID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PartialUpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json()\r",
							"pm.environment.set(\"Fname\", response.firstname)\r",
							"pm.environment.set(\"Lname\", response.lastname)\r",
							"\r",
							"\r",
							"var code =pm.response.code\r",
							"\r",
							"if(code==200)\r",
							"{pm.test(\"Your partial update request is SUCCESFUL\")}\r",
							"\r",
							"else{\r",
							"    pm.test(\"UNSUCCESFUL\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Nurul Afsar\",\r\n    \"lastname\": \"Johnny\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking/{{BookingID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"\r",
							"if(code==201){\r",
							"pm.test(\"Succesfully Deleted\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});}\r",
							"\r",
							"else\r",
							"{\r",
							"    pm.test(\"Failed to DELETE\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/booking/{{BookingID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		}
	]
}